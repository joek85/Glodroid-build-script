#!/bin/bash
# Joe K

WORKING_DIR=`pwd`
OUT_DIR=${WORKING_DIR}/output
ANDROID_OUT="ANDROID OUT DIRECTORY"
ANDROID_HOST="ANDROID OUT HOST DIRECTORY"
# Directories
KERNEL_BUILD_DIR="KERNEL DIRECTORY"
UBOOT_BUILD_DIR="UBOOT DIRECTORY"

# Def Configs
KERNEL_DEFCONFIG="sun8iw7p1smp_android_defconfig"
UBOOT_DEFCONFIG="orangepi_plus2e_defconfig"

# Cross Compile Path
CROSS_COMPILE_DIR="TOOLCHAIN DIRECTORY"

# uboot Fragments
UBOOT_FRAGMENTS=${WORKING_DIR}/common/uboot.config
UBOOT_FRAGMENT_EMMC=${WORKING_DIR}/common/uboot-emmc.config
UBOOT_FRAGMENT_SD=${WORKING_DIR}/common/uboot-sd.config
UBOOT_FRAGMENTS_SUNXI=${WORKING_DIR}/common/sunxi/uboot.config

UBOOT_OUT=${WORKING_DIR}/uboot/output
KERNEL_OUT=${WORKING_DIR}/kernel/output
UBOOT_KCFLAGS="-fgnu89-inline"

PRODUCT_DEVICE="dolphin-fvd-p1"
SYSFS_MMC0_PATH="soc/1c0f000.mmc"
SYSFS_MMC1_PATH="soc/1c11000.mmc"


BUILD_KERNEL_SUN8I() {
  echo "BUILDING KERNEL FOR: SUN8I"
	if [ ! -f ${KERNEL_OUT} ]; then
		mkdir -p ${KERNEL_OUT}/modules
	fi
	PATH=/usr/bin:/bin . ${WORKING_DIR}/kernel/build.sh -C=${CROSS_COMPILE_DIR} -D=${KERNEL_DEFCONFIG} -K=${KERNEL_BUILD_DIR}
	cd ${KERNEL_BUILD_DIR}
	cp -rf ${KERNEL_BUILD_DIR}/output/bImage ${ANDROID_OUT}/kernel
	cp -rf ${KERNEL_BUILD_DIR}/output/lib/modules/4.4.55/* ${ANDROID_OUT}/system/vendor/modules
  echo "KERNEL BUILT SUCCESSFULLY"
}
BUILD_UBOOT() {
  echo "BUILDING UBOOT FOR:" $UBOOT_DEFCONFIG
	cd $WORKING_DIR
	rm -rf ${UBOOT_OUT}
	if [ ! -f ${UBOOT_OUT} ]; then
		mkdir -p ${UBOOT_OUT}
	fi
	cd $UBOOT_BUILD_DIR
	PATH=/usr/bin:/bin make clean
	PATH=/usr/bin:/bin make mrproper
	PATH=/usr/bin:/bin make ARCH=arm CROSS_COMPILE=${CROSS_COMPILE_DIR} ${UBOOT_DEFCONFIG} -C ${UBOOT_BUILD_DIR} O=${UBOOT_OUT}
	cd ${UBOOT_OUT}
	PATH=/usr/bin:/bin . ${UBOOT_BUILD_DIR}/scripts/kconfig/merge_config.sh -m -O ${UBOOT_OUT}/ ${UBOOT_OUT}/.config ${UBOOT_FRAGMENTS} ${UBOOT_FRAGMENT_SD} ${UBOOT_FRAGMENTS_SUNXI} &
	
	PATH=/usr/bin:/bin make -j8 ARCH=arm CROSS_COMPILE=${CROSS_COMPILE_DIR} olddefconfig
	PATH=/usr/bin:/bin make -j8 ARCH=arm CROSS_COMPILE=${CROSS_COMPILE_DIR} KCFLAGS=${UBOOT_KCFLAGS}
	cp -rf u-boot-sunxi-with-spl.bin ${OUT_DIR}/u-boot-sunxi-with-spl.bin.sd
	
	echo
  echo "BUILDING UBOOT FINISHED"
}
MAKE_BOOT_SCR() {
	cd ${WORKING_DIR}/uboot
	cp -rf boot.txt ${OUT_DIR}
	cd ${WORKING_DIR}/uboot/output/tools
	./mkimage -C none -A arm -T script -C none -a 0 -e 0 -d ${OUT_DIR}/boot.txt ${OUT_DIR}/boot.scr
	/sbin/mkfs.vfat -n "uboot-scr" -S 512 -C env.img 256
	/usr/bin/mcopy -i env.img -s boot.scr ::boot.scr
}
GENERATE_BOOTLOADER_IMAGES() {
	cd ${OUT_DIR}
#	cp -f u-boot-sunxi-with-spl.bin u-boot-sunxi-with-spl.bin.sd
#	cp -f u-boot-sunxi-with-spl.bin bootloader.img
	cp -f u-boot-sunxi-with-spl.bin.sd bootloader-sd.img
#	dd if=/dev/null of=bootloader.img bs=1 count=1 seek=$((2048*1024-256*512))
	dd if=/dev/null of=bootloader-sd.img bs=1 count=1 seek=$(( 2048 * 1024 - 256 * 512 ))
}
CREATE_FLASH_SD() {
	echo "CREATING FLASH SD SCRIPT"
	cd ${WORKING_DIR}/tools
	cp -rf flash-all.sh ${OUT_DIR}
	cd ${OUT_DIR}
	sed -i "s/__SUFFIX__/-sd/g" flash-all.sh
	cp flash-all.sh flash-sd.sh
	echo "FINISHED FLASH SD SCRIPT"
}
DEPLOY_SD_IMAGE() {
	echo "DEPOLYING SD IMAGE"
	cd ${OUT_DIR}
	cp -rf env.img ${ANDROID_OUT}
	cp -rf bootloader-sd.img ${ANDROID_OUT}
	cd ${WORKING_DIR}/tools
	. ${WORKING_DIR}/tools/gensdimg.sh -C=${ANDROID_OUT} -T=DEPLOY-SD -P=sunxi deploy-sd.img
	echo "DEPOLYED SD IMAGE SUCCESSFULLY"
}
DEPLOY_GPT_IMAGE() {
	echo "DEPOLYING GPT IMAGE"
	cd ${OUT_DIR}
	dd if=${ANDROID_OUT}/deploy-sd.img of=${ANDROID_OUT}/deploy-gpt.img bs=1k count=128
	echo "DEPOLYED GPT IMAGE SUCCESSFULLY"
}
GENERATE_SD_IMAGE() {
	echo "GENERATE_SD_IMAGE"
	cp ${ANDROID_HOST}/adb ${ANDROID_OUT}
	cp ${ANDROID_HOST}/fastboot ${ANDROID_OUT}
	cp ${ANDROID_HOST}/mke2fs ${ANDROID_OUT}
	cp ${WORKING_DIR}/output/flash-sd.sh ${ANDROID_OUT}

	cd ${KERNEL_BUILD_DIR}/scripts/dtc 
	./dtc -I dts -O dtb -o ${WORKING_DIR}/kernel/sunxi.dtbo ${WORKING_DIR}/kernel/empty.dts
	cd ${WORKING_DIR}/kernel
	echo "# DTBO image configuration file for GloDroid project. Autogenerated, do not change!" > dtbo.cfg
	echo "  page_size=4096" >> dtbo.cfg
	echo "${WORKING_DIR}/kernel/sunxi.dtb" >> dtbo.cfg
	echo "  id=0x00000100" >> dtbo.cfg
	echo "${WORKING_DIR}/kernel/sunxi.dtbo" >> dtbo.cfg
	echo "  id=0x00000FFF" >> dtbo.cfg

	. ${WORKING_DIR}/tools/gensdimg.sh -C=${ANDROID_OUT} -T=SD -P=sunxi
	echo "GENERATE_SD_IMAGE COMPLETE"
}
INIT() {
	if [ ! -f ${OUT_DIR} ]; then
		mkdir -p ${OUT_DIR}
	fi
}
DELETE_OUTPUT_DIRECTORY() {
	if [ ! -f ${OUT_DIR} ]; then
		rm -rf ${OUT_DIR}
	fi
}
INIT

echo "Select a Option:"
echo
echo "1: Build Kernel SUN8I"
echo "2: Build U-Boot"
echo "3: Make boot.scr"
echo "4: Generate Bootloader Images"
echo "5: Create Flash SD Script"
echo "6: Deploy sd image"
echo "7: Deploy gpt image"
echo "8: Generate SD Images"
echo "9: Delete Output Directory"
echo

read option
if [ $option = 1 ]
        then BUILD_KERNEL_SUN8I
elif [ $option = 2 ]
        then BUILD_UBOOT
elif [ $option = 3 ]
        then MAKE_BOOT_SCR
elif [ $option = 4 ]
        then GENERATE_BOOTLOADER_IMAGES
elif [ $option = 5 ]
        then CREATE_FLASH_SD
elif [ $option = 6 ]
        then DEPLOY_SD_IMAGE
elif [ $option = 7 ]
        then DEPLOY_GPT_IMAGE
elif [ $option = 8 ]
        then GENERATE_SD_IMAGE
elif [ $option = 9 ]
        then DELETE_OUTPUT_DIRECTORY
fi
